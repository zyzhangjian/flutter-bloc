{"version":3,"file":"extension.js","mappings":"23BAQA,oBAAyBA,GAEvB,MAAMC,EAAaC,EAAOC,SAASC,gBACjC,gCACAC,MAAOC,IAEL,IAAKA,GAAsB,SAAfA,EAAIC,OAId,YAHAL,EAAOM,OAAOC,iBACZ,6DAKJC,QAAQC,IAAI,uBAAwBL,GAGpC,MAAMM,QAAkBV,EAAOM,OAAOK,aAAa,CACjDC,YAAa,uBACbC,OAAQ,yCACRC,cAAgBC,GACdA,OAAQC,EAAY,+BAGxB,IAAKN,EACH,OAIF,MAAMO,QAAwBjB,EAAOM,OAAOY,cAAc,CAAC,MAAO,MAAO,CACvEN,YAAa,sDAGVK,GA2BX,SACEP,EACAS,EACAC,GAGA,MAAMC,EAAqBC,EAAgBZ,GAGrCa,EAAiBb,EAAUc,QAAQ,oBAAqBC,GAC5DA,EAAMC,gBAGRlB,QAAQC,IAAI,cAAec,GAG3B,MAAMI,EAAkBP,EACpBQ,EAAKC,KAAKV,EAAYE,GACtBF,EAGEW,EAAoBF,EAAKC,KAC7BF,EACA,GAAGN,eAECU,EAAqBH,EAAKC,KAC9BF,EACA,GAAGN,gBAECW,EAAqBJ,EAAKC,KAC9BF,EACA,GAAGN,gBAIDD,GACFa,EAAGC,UAAUP,EAAiB,CAAEQ,WAAW,IAI7C,MAAMC,EAAe,iDAEbf,EAAmBgB,uCACnBhB,EAAmBgB,yCAErBd,sBAAmCA,WAAwBA,gBAC/DA,mBAAgCA,0FAIIA,0DAMhCe,EAAgB,kBAAkBf,0CAEhBA,YAGlBgB,EAAgB,SAAShB,eAC7BA,gCACSA,oBAKXU,EAAGO,cAAcV,EAAmBM,GACpCH,EAAGO,cAAcT,EAAoBO,GACrCL,EAAGO,cAAcR,EAAoBO,GAGrCvC,EAAOM,OAAOmC,uBACZ,SAASlB,6BAA0CI,KAEvD,CA5FMe,CACEhC,EANoB,QAApBO,EACIW,EAAKC,KAAKzB,EAAIuC,OAAQrB,EAAgBZ,IACtCN,EAAIuC,OAMY,QAApB1B,EACD,IAKLnB,EAAQ8C,cAAcC,KAAK9C,EAC7B,EAGA,wBAA8B,EA9D9B,kBACA,YACA,YA8IA,SAASuB,EAAgBZ,GAEvB,OAAOA,EAAUc,QAAQ,kBAAmB,SAASa,aACvD,C,UCrJAS,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBpC,IAAjBqC,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://flutterBloc/./src/extension.ts","webpack://flutterBloc/external commonjs \"vscode\"","webpack://flutterBloc/external node-commonjs \"fs\"","webpack://flutterBloc/external node-commonjs \"path\"","webpack://flutterBloc/webpack/bootstrap","webpack://flutterBloc/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\n// This method is called when your extension is activated\n// The extension is activated the first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Register a command: Flutter Bloc - New Bloc Template\n  const disposable = vscode.commands.registerCommand(\n    \"flutter-bloc.newBlocTemplate\",\n    async (uri: vscode.Uri) => {\n      // Ensure a valid folder path is selected\n      if (!uri || uri.scheme !== \"file\") {\n        vscode.window.showErrorMessage(\n          \"No folder selected. Please select a folder and try again.\"\n        );\n        return;\n      }\n\n      console.log(\"Selected folder URI:\", uri); // Log the selected folder path for debugging\n\n      // Prompt the user to input a class name\n      const className = await vscode.window.showInputBox({\n        placeHolder: \"Enter the class name\", // Placeholder text\n        prompt: \"This will create a new Dart class file\", // Prompt message\n        validateInput: (value) =>\n          value ? undefined : \"Class name cannot be empty\", // Validate that input is not empty\n      });\n\n      if (!className) {\n        return; // Cancel the operation if no class name is entered\n      }\n\n      // Ask the user if a new folder is needed for the files\n      const createNewFolder = await vscode.window.showQuickPick([\"Yes\", \"No\"], {\n        placeHolder: \"Do you want to create a new folder for the files?\", // Prompt message\n      });\n\n      if (!createNewFolder) {\n        return; // Cancel the operation if no choice is made\n      }\n\n      // Determine the target folder path\n      const targetFolderPath =\n        createNewFolder === \"Yes\"\n          ? path.join(uri.fsPath, formatClassName(className)) // Create a new folder if \"Yes\" is selected\n          : uri.fsPath; // Use the current folder if \"No\" is selected\n\n      // Create the Dart class files\n      createDartClassFile(\n        className,\n        targetFolderPath,\n        createNewFolder === \"Yes\" // Pass a flag indicating whether to create a new folder\n      );\n    }\n  );\n\n  // Add the command to the extension's subscription list\n  context.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\n// Function: Create Dart class files\nfunction createDartClassFile(\n  className: string,\n  folderPath: string,\n  createFolder: boolean\n) {\n  // Format the class name to snake_case, e.g., CreateName -> create_name\n  const formattedClassName = formatClassName(className);\n\n  // Convert the class name to PascalCase, e.g., create_name -> CreateName\n  const upperClassName = className.replace(/(?:^|\\_)([a-z])/g, (match) =>\n    match.toUpperCase()\n  );\n\n  console.log(\"className =\", upperClassName); // Log the formatted class name for debugging\n\n  // Determine the folder path where files will be created\n  const classFolderPath = createFolder\n    ? path.join(folderPath, formattedClassName) // Add a subfolder if needed\n    : folderPath; // Use the given folder path if no subfolder is needed\n\n  // Define the file paths for Bloc, Event, and State\n  const classFilePathBloc = path.join(\n    classFolderPath,\n    `${formattedClassName}_bloc.dart`\n  );\n  const classFilePathEvent = path.join(\n    classFolderPath,\n    `${formattedClassName}_event.dart`\n  );\n  const classFilePathState = path.join(\n    classFolderPath,\n    `${formattedClassName}_state.dart`\n  );\n\n  // Create the folder if needed\n  if (createFolder) {\n    fs.mkdirSync(classFolderPath, { recursive: true });\n  }\n\n  // Define the Bloc template code\n  const blocTemplate = `import 'package:bloc/bloc.dart';\n  \nimport '${formattedClassName.toLowerCase()}_event.dart';\nimport '${formattedClassName.toLowerCase()}_state.dart';\n  \nclass ${upperClassName}Bloc extends Bloc<${upperClassName}Event, ${upperClassName}State> {\n  ${upperClassName}Bloc() : super(${upperClassName}State()) {\n    on<InitEvent>(_init);\n  }\n  \n  void _init(InitEvent event, Emitter<${upperClassName}State> emit) async {\n    emit(state.clone());\n  }\n}`;\n\n  // Define the Event template code\n  const eventTemplate = `abstract class ${upperClassName}Event {}\n  \nclass InitEvent extends ${upperClassName}Event {}`;\n\n  // Define the State template code\n  const stateTemplate = `class ${upperClassName}State {\n  ${upperClassName}State clone() {\n    return ${upperClassName}State();\n  }\n}`;\n\n  // Create and write content to the files\n  fs.writeFileSync(classFilePathBloc, blocTemplate);\n  fs.writeFileSync(classFilePathEvent, eventTemplate);\n  fs.writeFileSync(classFilePathState, stateTemplate);\n\n  // Show a message indicating the operation was successful\n  vscode.window.showInformationMessage(\n    `Class ${upperClassName} created successfully in ${classFolderPath}.`\n  );\n}\n\n// Utility function: Format the class name to snake_case\nfunction formatClassName(className: string): string {\n  // Use a regular expression to convert camelCase or PascalCase to snake_case\n  return className.replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","async","uri","scheme","window","showErrorMessage","console","log","className","showInputBox","placeHolder","prompt","validateInput","value","undefined","createNewFolder","showQuickPick","folderPath","createFolder","formattedClassName","formatClassName","upperClassName","replace","match","toUpperCase","classFolderPath","path","join","classFilePathBloc","classFilePathEvent","classFilePathState","fs","mkdirSync","recursive","blocTemplate","toLowerCase","eventTemplate","stateTemplate","writeFileSync","showInformationMessage","createDartClassFile","fsPath","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}